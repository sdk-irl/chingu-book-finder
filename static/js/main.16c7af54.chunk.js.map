{"version":3,"sources":["SearchBar.js","BookCard.js","App.js","serviceWorker.js","index.js"],"names":["googBooksUrl","SearchBar","setInputRef","ref","_this","inputValue","updateSearch","request","Request","value","method","dataType","fetch","then","response","ok","Error","status","json","props","update","items","catch","error","console","log","message","react_default","a","createElement","className","type","placeholder","this","onClick","Component","BookCard","bookData","thumbnail","imageLinks","smallThumbnail","authors","join","class","src","alt","title","publisher","href","infoLink","App","state","books","updateResults","setState","src_SearchBar","map","book","index","src_BookCard","key","volumeInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGIA,SAAe,kDAqDJC,6MAhDXC,YAAc,SAAAC,GACVC,EAAKC,WAAaF,KAItBG,aAAe,WACX,IAAMC,EAAU,IAAIC,QAASR,EAAeI,EAAKC,WAAWI,MAAO,CAC/DC,OAAQ,MACRC,SAAU,SAId,OAAOC,MAAML,GAERM,KAAK,SAAAC,GACF,IAAIA,EAASC,GACT,MAAM,IAAIC,MAAM,wBAA0BF,EAASG,QAEvD,OAAOH,IAGVD,KAAK,SAAAC,GAAQ,OAAIA,EAASI,SAE1BL,KAAK,SAAAC,GACFV,EAAKe,MAAMC,OAAON,EAASO,SAG9BC,MAAM,SAAAC,GACHC,QAAQC,IAAI,yDAA0DF,EAAMG,oFAMpF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,SACIE,KAAK,OACLC,YAAY,SACZ7B,IAAK8B,KAAK/B,cAEdyB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASI,QAASD,KAAK3B,cAAzC,kBA3CQ6B,aCwBTC,EA1BE,SAAAjB,GACb,IAAMkB,EAAWlB,EAAMkB,SAEjBC,EAAYD,EAASE,WAAaF,EAASE,WAAWC,eAAiB,KACvEC,EAAUJ,EAASI,QAAUJ,EAASI,QAAQC,OAAS,OAG7D,OACIf,EAAAC,EAAAC,cAAA,OAAKc,MAAM,YACPhB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,kBACPhB,EAAAC,EAAAC,cAAA,OACIC,UAAU,YACVc,IAAKN,EACLO,IAAK,aAAeR,EAASS,SAGrCnB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,YACPhB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,SAASN,EAASS,OAC7BnB,EAAAC,EAAAC,cAAA,OAAKc,MAAM,WAAWF,GACtBd,EAAAC,EAAAC,cAAA,OAAKc,MAAM,aAAaN,EAASU,WACjCpB,EAAAC,EAAAC,cAAA,KAAGmB,KAAMX,EAASY,UAAlB,gBCSDC,6MA3BbC,MAAQ,CACNC,MAAO,MAGXC,cAAgB,SAAAD,GACdhD,EAAKkD,SAAS,CAACF,MAAOA,6EAIpB,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAC0B,EAAD,CACEnC,OAAQa,KAAKoB,gBAEf1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZG,KAAKkB,MAAMC,MAAMI,IAAI,SAACC,EAAMC,GAC3B,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAUC,IAAKF,EAAOrB,SAAUoB,EAAKI,wBApBtC1B,aCOE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.16c7af54.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n//const API_KEY = \"AIzaSyA8mV96_G2-uDhDT5EfxxYowv0wima9Jwg\";\nlet googBooksUrl = \"https://www.googleapis.com/books/v1/volumes?q=\";\n\n//Creates search bar component\nclass SearchBar extends Component {\n    //sets a reference input to refer back to when searching for item\n    setInputRef = ref => {\n        this.inputValue = ref;\n    }\n\n    //update search function to handle fetching and returning Google Books API information\n    updateSearch = () => {\n        const request = new Request (googBooksUrl + this.inputValue.value, {\n            method: \"GET\",\n            dataType: \"json\"\n        });\n\n        //fetches Google book API info\n        return fetch(request)\n            //if response isn't okay, reads out error message\n            .then(response => {\n                if(!response.ok) {\n                    throw new Error('HTTP error, status = ' + response.status);\n                }\n                return response;\n            })\n            //if response is okay, send back json version of response\n            .then(response => response.json())\n            //sends updates properties for response items\n            .then(response => {\n                this.props.update(response.items)\n            })\n            //catches any errors\n            .catch(error => {\n                console.log(\"There has been a problem with the fetch operation: ', \", error.message);\n            });\n    }\n              \n    render() {\n        //returns search bar for input and search button\n        return (\n            <div className=\"search-bar\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    ref={this.setInputRef}\n                />\n                <button className=\"button\" onClick={this.updateSearch}>Search</button>\n            </div>\n        )\n    }\n}\n\n\nexport default SearchBar;","import React, { Component } from 'react';\n\n//stateless component\n\nconst BookCard = props => {\n    const bookData = props.bookData;\n    //ternary operators to handle no data returned for thumbnails and authors, and to join the authors array\n    const thumbnail = bookData.imageLinks ? bookData.imageLinks.smallThumbnail : null;\n    const authors = bookData.authors ? bookData.authors.join() : \"None\";\n\n    //renders book card component with image, title, pub, author(s), and link to more info\n    return (\n        <div class=\"bookCard\">\n            <div class=\"imageContainer\">\n                <img \n                    className=\"bookImage\"\n                    src={thumbnail}\n                    alt={\"Cover for \" + bookData.title}>\n                </img>\n            </div>\n            <div class=\"bookInfo\">\n                <div class=\"title\">{bookData.title}</div>\n                <div class=\"authors\">{authors}</div>\n                <div class=\"publisher\">{bookData.publisher}</div>\n                <a href={bookData.infoLink}>More info</a>\n            </div>\n        </div>\n    );\n}\n\nexport default BookCard;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './SearchBar.js';\nimport BookCard from './BookCard.js';\n\nclass App extends Component {\n  state = {\n    books: []\n}\n//function that sets the state of this component to what's passed back from search bar\nupdateResults = books => {\n  this.setState({books: books})\n}\n  //renders the header, search bar component, and as many book cards as the search returns, usually 10\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <h1>Book Finder</h1>\n        </header>\n        <SearchBar\n          update={this.updateResults}\n        />\n        <div className=\"bookResults\">\n          {this.state.books.map((book, index) => {\n            return <BookCard key={index} bookData={book.volumeInfo}/>\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}